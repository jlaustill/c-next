{
  "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
  "name": "c-next",
  "scopeName": "source.cnext",
  "fileTypes": ["cn", "cnm"],
  "patterns": [
    {
      "include": "#comments"
    },
    {
      "include": "#preprocessor"
    },
    {
      "include": "#imports"
    },
    {
      "include": "#keywords"
    },
    {
      "include": "#types"
    },
    {
      "include": "#strings"
    },
    {
      "include": "#numbers"
    },
    {
      "include": "#operators"
    },
    {
      "include": "#functions"
    },
    {
      "include": "#class-declarations"
    },
    {
      "include": "#interface-declarations"
    },
    {
      "include": "#identifiers"
    }
  ],
  "repository": {
    "comments": {
      "patterns": [
        {
          "name": "comment.line.double-slash.cnext",
          "match": "//.*$"
        },
        {
          "name": "comment.block.cnext",
          "begin": "/\\*",
          "end": "\\*/"
        }
      ]
    },
    "preprocessor": {
      "patterns": [
        {
          "name": "meta.preprocessor.include.cnext",
          "match": "^\\s*(#include)\\s+(\"[^\"]*\")",
          "captures": {
            "1": {
              "name": "keyword.control.directive.include.cnext"
            },
            "2": {
              "name": "string.quoted.double.cnext"
            }
          }
        }
      ]
    },
    "imports": {
      "patterns": [
        {
          "name": "meta.import.cnext",
          "match": "\\b(import)\\s+(\"[^\"]*\")",
          "captures": {
            "1": {
              "name": "keyword.control.import.cnext"
            },
            "2": {
              "name": "string.quoted.double.cnext"
            }
          }
        }
      ]
    },
    "keywords": {
      "patterns": [
        {
          "name": "keyword.control.cnext",
          "match": "\\b(if|else|for|while|do|switch|case|default|break|continue|return)\\b"
        },
        {
          "name": "keyword.other.cnext",
          "match": "\\b(class|interface|public|private|static|void|heap)\\b"
        }
      ]
    },
    "types": {
      "patterns": [
        {
          "name": "storage.type.primitive.cnext",
          "match": "\\b(int8|int16|int32|int64|uint8|uint16|uint32|uint64|float32|float64|float96|String|boolean)\\b"
        },
        {
          "name": "storage.type.interface.cnext",
          "match": "\\b(I[A-Z][a-zA-Z0-9]*)\\b"
        }
      ]
    },
    "strings": {
      "patterns": [
        {
          "name": "string.quoted.backtick.cnext",
          "begin": "`",
          "end": "`",
          "patterns": [
            {
              "name": "constant.character.escape.cnext",
              "match": "\\\\."
            },
            {
              "name": "constant.other.placeholder.cnext",
              "begin": "\\${",
              "end": "}",
              "patterns": [
                {
                  "include": "#expressions"
                }
              ]
            }
          ]
        },
        {
          "name": "string.quoted.double.cnext",
          "begin": "\"",
          "end": "\"",
          "patterns": [
            {
              "name": "constant.character.escape.cnext",
              "match": "\\\\."
            }
          ]
        }
      ]
    },
    "numbers": {
      "patterns": [
        {
          "name": "constant.numeric.decimal.cnext",
          "match": "\\b\\d+(\\.\\d+)?([eE][+-]?\\d+)?\\b"
        },
        {
          "name": "constant.numeric.hexadecimal.cnext",
          "match": "\\b0[xX][0-9a-fA-F]+\\b"
        }
      ]
    },
    "operators": {
      "patterns": [
        {
          "name": "keyword.operator.assignment.cnext",
          "match": "<-"
        },
        {
          "name": "keyword.operator.concatenation.cnext",
          "match": "\\+<-"
        },
        {
          "name": "keyword.operator.arithmetic.cnext",
          "match": "\\+|\\-|\\*|\\/|%"
        },
        {
          "name": "keyword.operator.comparison.cnext",
          "match": "==|!=|<|>|<=|>="
        },
        {
          "name": "keyword.operator.logical.cnext",
          "match": "&&|\\|\\||!"
        },
        {
          "name": "keyword.operator.bitwise.cnext",
          "match": "&|\\||\\^|~|<<|>>"
        },
        {
          "name": "punctuation.separator.cnext",
          "match": "[,;]"
        },
        {
          "name": "punctuation.section.block.cnext",
          "match": "[{}]"
        },
        {
          "name": "punctuation.section.parens.cnext",
          "match": "[()]"
        },
        {
          "name": "punctuation.section.brackets.cnext",
          "match": "[\\[\\]]"
        },
        {
          "name": "punctuation.accessor.cnext",
          "match": "\\."
        }
      ]
    },
    "functions": {
      "patterns": [
        {
          "name": "meta.function.cnext",
          "begin": "\\b(public\\s+)?(static\\s+)?([a-zA-Z_][a-zA-Z0-9_]*|void)\\s+([a-zA-Z_][a-zA-Z0-9_]*)\\s*\\(",
          "beginCaptures": {
            "1": {
              "name": "storage.modifier.cnext"
            },
            "2": {
              "name": "storage.modifier.cnext"
            },
            "3": {
              "name": "storage.type.cnext"
            },
            "4": {
              "name": "entity.name.function.cnext"
            }
          },
          "end": "\\)",
          "patterns": [
            {
              "include": "#function-parameters"
            }
          ]
        },
        {
          "name": "meta.function-call.cnext",
          "match": "\\b([a-zA-Z_][a-zA-Z0-9_]*)\\s*\\(",
          "captures": {
            "1": {
              "name": "entity.name.function.cnext"
            }
          }
        },
        {
          "name": "meta.method-call.cnext",
          "match": "\\b([a-zA-Z_][a-zA-Z0-9_]*)\\s*\\.\\s*([a-zA-Z_][a-zA-Z0-9_]*)\\s*\\(",
          "captures": {
            "1": {
              "name": "variable.other.object.cnext"
            },
            "2": {
              "name": "entity.name.function.method.cnext"
            }
          }
        }
      ]
    },
    "function-parameters": {
      "patterns": [
        {
          "match": "\\b([a-zA-Z_][a-zA-Z0-9_]*)\\s+([a-zA-Z_][a-zA-Z0-9_]*)",
          "captures": {
            "1": {
              "name": "storage.type.cnext"
            },
            "2": {
              "name": "variable.parameter.cnext"
            }
          }
        }
      ]
    },
    "class-declarations": {
      "patterns": [
        {
          "name": "meta.class.cnext",
          "begin": "\\b(static\\s+)?(class)\\s+([A-Z][a-zA-Z0-9_]*)",
          "beginCaptures": {
            "1": {
              "name": "storage.modifier.cnext"
            },
            "2": {
              "name": "storage.type.class.cnext"
            },
            "3": {
              "name": "entity.name.type.class.cnext"
            }
          },
          "end": "(?<=})",
          "patterns": [
            {
              "include": "$self"
            }
          ]
        }
      ]
    },
    "interface-declarations": {
      "patterns": [
        {
          "name": "meta.interface.cnext",
          "begin": "\\b(interface)\\s+(I[A-Z][a-zA-Z0-9_]*)",
          "beginCaptures": {
            "1": {
              "name": "storage.type.interface.cnext"
            },
            "2": {
              "name": "entity.name.type.interface.cnext"
            }
          },
          "end": "(?<=})",
          "patterns": [
            {
              "include": "$self"
            }
          ]
        }
      ]
    },
    "identifiers": {
      "patterns": [
        {
          "name": "variable.other.cnext",
          "match": "\\b[a-zA-Z_][a-zA-Z0-9_]*\\b"
        }
      ]
    },
    "expressions": {
      "patterns": [
        {
          "include": "#strings"
        },
        {
          "include": "#numbers"
        },
        {
          "include": "#operators"
        },
        {
          "include": "#identifiers"
        }
      ]
    }
  }
}