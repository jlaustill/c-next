"use strict";
// Generated from cNext.g4 by ANTLR 4.9.0-SNAPSHOT
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.cNextLexer = void 0;
const ATNDeserializer_1 = require("antlr4ts/atn/ATNDeserializer");
const Lexer_1 = require("antlr4ts/Lexer");
const LexerATNSimulator_1 = require("antlr4ts/atn/LexerATNSimulator");
const VocabularyImpl_1 = require("antlr4ts/VocabularyImpl");
const Utils = __importStar(require("antlr4ts/misc/Utils"));
class cNextLexer extends Lexer_1.Lexer {
    // @Override
    // @NotNull
    get vocabulary() {
        return cNextLexer.VOCABULARY;
    }
    // tslint:enable:no-trailing-whitespace
    constructor(input) {
        super(input);
        this._interp = new LexerATNSimulator_1.LexerATNSimulator(cNextLexer._ATN, this);
    }
    // @Override
    get grammarFileName() { return "cNext.g4"; }
    // @Override
    get ruleNames() { return cNextLexer.ruleNames; }
    // @Override
    get serializedATN() { return cNextLexer._serializedATN; }
    // @Override
    get channelNames() { return cNextLexer.channelNames; }
    // @Override
    get modeNames() { return cNextLexer.modeNames; }
    static get _ATN() {
        if (!cNextLexer.__ATN) {
            cNextLexer.__ATN = new ATNDeserializer_1.ATNDeserializer().deserialize(Utils.toCharArray(cNextLexer._serializedATN));
        }
        return cNextLexer.__ATN;
    }
}
exports.cNextLexer = cNextLexer;
cNextLexer.T__0 = 1;
cNextLexer.PUBLIC = 2;
cNextLexer.STATIC = 3;
cNextLexer.CLASS = 4;
cNextLexer.TYPE_INT8 = 5;
cNextLexer.TYPE_INT16 = 6;
cNextLexer.TYPE_INT32 = 7;
cNextLexer.TYPE_INT64 = 8;
cNextLexer.TYPE_STRING = 9;
cNextLexer.ASSIGN = 10;
cNextLexer.SEMI = 11;
cNextLexer.LBRACE = 12;
cNextLexer.RBRACE = 13;
cNextLexer.LPAREN = 14;
cNextLexer.RPAREN = 15;
cNextLexer.COMMA = 16;
cNextLexer.RETURN = 17;
cNextLexer.PLUS = 18;
cNextLexer.MINUS = 19;
cNextLexer.MULT = 20;
cNextLexer.DIV = 21;
cNextLexer.ID = 22;
cNextLexer.NUMBER = 23;
cNextLexer.STRING = 24;
cNextLexer.WS = 25;
// tslint:disable:no-trailing-whitespace
cNextLexer.channelNames = [
    "DEFAULT_TOKEN_CHANNEL", "HIDDEN",
];
// tslint:disable:no-trailing-whitespace
cNextLexer.modeNames = [
    "DEFAULT_MODE",
];
cNextLexer.ruleNames = [
    "T__0", "PUBLIC", "STATIC", "CLASS", "TYPE_INT8", "TYPE_INT16", "TYPE_INT32",
    "TYPE_INT64", "TYPE_STRING", "ASSIGN", "SEMI", "LBRACE", "RBRACE", "LPAREN",
    "RPAREN", "COMMA", "RETURN", "PLUS", "MINUS", "MULT", "DIV", "ID", "NUMBER",
    "STRING", "WS",
];
cNextLexer._LITERAL_NAMES = [
    undefined, "'void'", "'public'", "'static'", "'class'", "'int8'", "'int16'",
    "'int32'", "'int64'", "'String'", "'<-'", "';'", "'{'", "'}'", "'('",
    "')'", "','", "'return'", "'+'", "'-'", "'*'", "'/'",
];
cNextLexer._SYMBOLIC_NAMES = [
    undefined, undefined, "PUBLIC", "STATIC", "CLASS", "TYPE_INT8", "TYPE_INT16",
    "TYPE_INT32", "TYPE_INT64", "TYPE_STRING", "ASSIGN", "SEMI", "LBRACE",
    "RBRACE", "LPAREN", "RPAREN", "COMMA", "RETURN", "PLUS", "MINUS", "MULT",
    "DIV", "ID", "NUMBER", "STRING", "WS",
];
cNextLexer.VOCABULARY = new VocabularyImpl_1.VocabularyImpl(cNextLexer._LITERAL_NAMES, cNextLexer._SYMBOLIC_NAMES, []);
cNextLexer._serializedATN = "\x03\uC91D\uCABA\u058D\uAFBA\u4F53\u0607\uEA8B\uC241\x02\x1B\xA6\b\x01" +
    "\x04\x02\t\x02\x04\x03\t\x03\x04\x04\t\x04\x04\x05\t\x05\x04\x06\t\x06" +
    "\x04\x07\t\x07\x04\b\t\b\x04\t\t\t\x04\n\t\n\x04\v\t\v\x04\f\t\f\x04\r" +
    "\t\r\x04\x0E\t\x0E\x04\x0F\t\x0F\x04\x10\t\x10\x04\x11\t\x11\x04\x12\t" +
    "\x12\x04\x13\t\x13\x04\x14\t\x14\x04\x15\t\x15\x04\x16\t\x16\x04\x17\t" +
    "\x17\x04\x18\t\x18\x04\x19\t\x19\x04\x1A\t\x1A\x03\x02\x03\x02\x03\x02" +
    "\x03\x02\x03\x02\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03" +
    "\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x05\x03\x05" +
    "\x03\x05\x03\x05\x03\x05\x03\x05\x03\x06\x03\x06\x03\x06\x03\x06\x03\x06" +
    "\x03\x07\x03\x07\x03\x07\x03\x07\x03\x07\x03\x07\x03\b\x03\b\x03\b\x03" +
    "\b\x03\b\x03\b\x03\t\x03\t\x03\t\x03\t\x03\t\x03\t\x03\n\x03\n\x03\n\x03" +
    "\n\x03\n\x03\n\x03\n\x03\v\x03\v\x03\v\x03\f\x03\f\x03\r\x03\r\x03\x0E" +
    "\x03\x0E\x03\x0F\x03\x0F\x03\x10\x03\x10\x03\x11\x03\x11\x03\x12\x03\x12" +
    "\x03\x12\x03\x12\x03\x12\x03\x12\x03\x12\x03\x13\x03\x13\x03\x14\x03\x14" +
    "\x03\x15\x03\x15\x03\x16\x03\x16\x03\x17\x03\x17\x07\x17\x8D\n\x17\f\x17" +
    "\x0E\x17\x90\v\x17\x03\x18\x06\x18\x93\n\x18\r\x18\x0E\x18\x94\x03\x19" +
    "\x03\x19\x07\x19\x99\n\x19\f\x19\x0E\x19\x9C\v\x19\x03\x19\x03\x19\x03" +
    "\x1A\x06\x1A\xA1\n\x1A\r\x1A\x0E\x1A\xA2\x03\x1A\x03\x1A\x03\x9A\x02\x02" +
    "\x1B\x03\x02\x03\x05\x02\x04\x07\x02\x05\t\x02\x06\v\x02\x07\r\x02\b\x0F" +
    "\x02\t\x11\x02\n\x13\x02\v\x15\x02\f\x17\x02\r\x19\x02\x0E\x1B\x02\x0F" +
    "\x1D\x02\x10\x1F\x02\x11!\x02\x12#\x02\x13%\x02\x14\'\x02\x15)\x02\x16" +
    "+\x02\x17-\x02\x18/\x02\x191\x02\x1A3\x02\x1B\x03\x02\x06\x04\x02C\\c" +
    "|\x05\x022;C\\c|\x03\x022;\x05\x02\v\f\x0F\x0F\"\"\x02\xA9\x02\x03\x03" +
    "\x02\x02\x02\x02\x05\x03\x02\x02\x02\x02\x07\x03\x02\x02\x02\x02\t\x03" +
    "\x02\x02\x02\x02\v\x03\x02\x02\x02\x02\r\x03\x02\x02\x02\x02\x0F\x03\x02" +
    "\x02\x02\x02\x11\x03\x02\x02\x02\x02\x13\x03\x02\x02\x02\x02\x15\x03\x02" +
    "\x02\x02\x02\x17\x03\x02\x02\x02\x02\x19\x03\x02\x02\x02\x02\x1B\x03\x02" +
    "\x02\x02\x02\x1D\x03\x02\x02\x02\x02\x1F\x03\x02\x02\x02\x02!\x03\x02" +
    "\x02\x02\x02#\x03\x02\x02\x02\x02%\x03\x02\x02\x02\x02\'\x03\x02\x02\x02" +
    "\x02)\x03\x02\x02\x02\x02+\x03\x02\x02\x02\x02-\x03\x02\x02\x02\x02/\x03" +
    "\x02\x02\x02\x021\x03\x02\x02\x02\x023\x03\x02\x02\x02\x035\x03\x02\x02" +
    "\x02\x05:\x03\x02\x02\x02\x07A\x03\x02\x02\x02\tH\x03\x02\x02\x02\vN\x03" +
    "\x02\x02\x02\rS\x03\x02\x02\x02\x0FY\x03\x02\x02\x02\x11_\x03\x02\x02" +
    "\x02\x13e\x03\x02\x02\x02\x15l\x03\x02\x02\x02\x17o\x03\x02\x02\x02\x19" +
    "q\x03\x02\x02\x02\x1Bs\x03\x02\x02\x02\x1Du\x03\x02\x02\x02\x1Fw\x03\x02" +
    "\x02\x02!y\x03\x02\x02\x02#{\x03\x02\x02\x02%\x82\x03\x02\x02\x02\'\x84" +
    "\x03\x02\x02\x02)\x86\x03\x02\x02\x02+\x88\x03\x02\x02\x02-\x8A\x03\x02" +
    "\x02\x02/\x92\x03\x02\x02\x021\x96\x03\x02\x02\x023\xA0\x03\x02\x02\x02" +
    "56\x07x\x02\x0267\x07q\x02\x0278\x07k\x02\x0289\x07f\x02\x029\x04\x03" +
    "\x02\x02\x02:;\x07r\x02\x02;<\x07w\x02\x02<=\x07d\x02\x02=>\x07n\x02\x02" +
    ">?\x07k\x02\x02?@\x07e\x02\x02@\x06\x03\x02\x02\x02AB\x07u\x02\x02BC\x07" +
    "v\x02\x02CD\x07c\x02\x02DE\x07v\x02\x02EF\x07k\x02\x02FG\x07e\x02\x02" +
    "G\b\x03\x02\x02\x02HI\x07e\x02\x02IJ\x07n\x02\x02JK\x07c\x02\x02KL\x07" +
    "u\x02\x02LM\x07u\x02\x02M\n\x03\x02\x02\x02NO\x07k\x02\x02OP\x07p\x02" +
    "\x02PQ\x07v\x02\x02QR\x07:\x02\x02R\f\x03\x02\x02\x02ST\x07k\x02\x02T" +
    "U\x07p\x02\x02UV\x07v\x02\x02VW\x073\x02\x02WX\x078\x02\x02X\x0E\x03\x02" +
    "\x02\x02YZ\x07k\x02\x02Z[\x07p\x02\x02[\\\x07v\x02\x02\\]\x075\x02\x02" +
    "]^\x074\x02\x02^\x10\x03\x02\x02\x02_`\x07k\x02\x02`a\x07p\x02\x02ab\x07" +
    "v\x02\x02bc\x078\x02\x02cd\x076\x02\x02d\x12\x03\x02\x02\x02ef\x07U\x02" +
    "\x02fg\x07v\x02\x02gh\x07t\x02\x02hi\x07k\x02\x02ij\x07p\x02\x02jk\x07" +
    "i\x02\x02k\x14\x03\x02\x02\x02lm\x07>\x02\x02mn\x07/\x02\x02n\x16\x03" +
    "\x02\x02\x02op\x07=\x02\x02p\x18\x03\x02\x02\x02qr\x07}\x02\x02r\x1A\x03" +
    "\x02\x02\x02st\x07\x7F\x02\x02t\x1C\x03\x02\x02\x02uv\x07*\x02\x02v\x1E" +
    "\x03\x02\x02\x02wx\x07+\x02\x02x \x03\x02\x02\x02yz\x07.\x02\x02z\"\x03" +
    "\x02\x02\x02{|\x07t\x02\x02|}\x07g\x02\x02}~\x07v\x02\x02~\x7F\x07w\x02" +
    "\x02\x7F\x80\x07t\x02\x02\x80\x81\x07p\x02\x02\x81$\x03\x02\x02\x02\x82" +
    "\x83\x07-\x02\x02\x83&\x03\x02\x02\x02\x84\x85\x07/\x02\x02\x85(\x03\x02" +
    "\x02\x02\x86\x87\x07,\x02\x02\x87*\x03\x02\x02\x02\x88\x89\x071\x02\x02" +
    "\x89,\x03\x02\x02\x02\x8A\x8E\t\x02\x02\x02\x8B\x8D\t\x03\x02\x02\x8C" +
    "\x8B\x03\x02\x02\x02\x8D\x90\x03\x02\x02\x02\x8E\x8C\x03\x02\x02\x02\x8E" +
    "\x8F\x03\x02\x02\x02\x8F.\x03\x02\x02\x02\x90\x8E\x03\x02\x02\x02\x91" +
    "\x93\t\x04\x02\x02\x92\x91\x03\x02\x02\x02\x93\x94\x03\x02\x02\x02\x94" +
    "\x92\x03\x02\x02\x02\x94\x95\x03\x02\x02\x02\x950\x03\x02\x02\x02\x96" +
    "\x9A\x07b\x02\x02\x97\x99\v\x02\x02\x02\x98\x97\x03\x02\x02\x02\x99\x9C" +
    "\x03\x02\x02\x02\x9A\x9B\x03\x02\x02\x02\x9A\x98\x03\x02\x02\x02\x9B\x9D" +
    "\x03\x02\x02\x02\x9C\x9A\x03\x02\x02\x02\x9D\x9E\x07b\x02\x02\x9E2\x03" +
    "\x02\x02\x02\x9F\xA1\t\x05\x02\x02\xA0\x9F\x03\x02\x02\x02\xA1\xA2\x03" +
    "\x02\x02\x02\xA2\xA0\x03\x02\x02\x02\xA2\xA3\x03\x02\x02\x02\xA3\xA4\x03" +
    "\x02\x02\x02\xA4\xA5\b\x1A\x02\x02\xA54\x03\x02\x02\x02\x07\x02\x8E\x94" +
    "\x9A\xA2\x03\b\x02\x02";
